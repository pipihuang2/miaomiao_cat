name: No_Money

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install requests jq

      - name: Get PR diff and send to AI for analysis
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        id: ai_analysis
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          OWNER=${{ github.repository_owner }}
          REPO=${{ github.event.repository.name }}
          DIFF_URL="https://api.github.com/repos/${OWNER}/${REPO}/pulls/${PR_NUMBER}.diff"

          echo "Fetching diff from: $DIFF_URL"
          PR_DIFF=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.diff" \
            "$DIFF_URL")
          HTTP_STATUS=$(echo "$PR_DIFF" | grep '^HTTP_STATUS:' | cut -d':' -f2)
          PR_DIFF=$(echo "$PR_DIFF" | grep -v '^HTTP_STATUS:')

          echo "HTTP Status: $HTTP_STATUS"
          PR_DIFF_CLEANED=$(echo "$PR_DIFF" | tr -d '\000-\031')
          echo "PR Diff: $PR_DIFF_CLEANED"

          if [ -z "$PR_DIFF_CLEANED" ]; then
            echo "Error: Failed to retrieve PR diff."
            exit 1
          fi
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Error: HTTP request failed with status $HTTP_STATUS."
            exit 1
          fi
          if echo "$PR_DIFF_CLEANED" | grep -q '^{.*}$'; then
            echo "Error: PR Diff is JSON metadata instead of code diff. Check DIFF_URL or GITHUB_TOKEN permissions."
            exit 1
          fi

          REQUEST_BODY=$(jq -n \
            --arg diff "$PR_DIFF_CLEANED" \
            '{
              "model": "deepseek-chat",
              "messages": [
                {"role": "system", "content": "You are a code review assistant. Analyze the provided code diff and generate a concise, helpful review comment."},
                {"role": "user", "content": ("Here is the code diff from a pull request:\n" + $diff + "\nPlease provide a review comment.")}
              ],
              "stream": false
            }')
          echo "Request Body: $REQUEST_BODY"

          AI_RESPONSE=$(curl -s -X POST "https://api.deepseek.com/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $DEEPSEEK_API_KEY" \
            -d "$REQUEST_BODY")
          echo "API Response: $AI_RESPONSE"

          if echo "$AI_RESPONSE" | grep -q '"message":"Insufficient Balance"'; then
            AI_COMMENT="AI余额不足，请检查DeepSeek账户余额。"
          else
            AI_COMMENT=$(echo "$AI_RESPONSE" | jq -r '.choices[0].message.content // "Error: No valid response from AI"')
          fi
          echo "AI Comment: $AI_COMMENT"

          if [ -z "$AI_COMMENT" ] || [ "$AI_COMMENT" = "Error: No valid response from AI" ]; then
            echo "Failed to get a valid AI comment. Falling back to default message."
            AI_COMMENT="AI分析失败，请手动检查代码差异。"
          fi

          echo "ai_comment=$AI_COMMENT" >> $GITHUB_OUTPUT

      - name: Post AI comment to PR
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          OWNER=${{ github.repository_owner }}
          REPO=${{ github.event.repository.name }}
          COMMENT_API_URL="https://api.github.com/repos/${OWNER}/${REPO}/issues/${PR_NUMBER}/comments"

          # 获取 AI 评论内容
          COMMENT_BODY="${{ steps.ai_analysis.outputs.ai_comment }}"
          # 转义特殊字符，确保安全
          COMMENT_BODY=$(echo "$COMMENT_BODY" | sed 's/`/\\`/g' | sed 's/"/\\"/g')
          echo "Comment Body: $COMMENT_BODY"

          # 检查评论内容是否为空
          if [ -z "$COMMENT_BODY" ]; then
            COMMENT_BODY="Error: No comment generated."
          fi

          # 发送评论到 PR，并检查响应
          echo "Posting comment to: $COMMENT_API_URL"
          CURL_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"body\": \"$COMMENT_BODY\"}" "$COMMENT_API_URL")
          HTTP_STATUS=$(echo "$CURL_RESPONSE" | grep '^HTTP_STATUS:' | cut -d':' -f2)
          CURL_RESPONSE=$(echo "$CURL_RESPONSE" | grep -v '^HTTP_STATUS:')

          echo "HTTP Status: $HTTP_STATUS"
          echo "Curl Response: $CURL_RESPONSE"
          if [ "$HTTP_STATUS" -ne 201 ]; then
            echo "Error: Failed to post comment. Status: $HTTP_STATUS"
            exit 1
          fi